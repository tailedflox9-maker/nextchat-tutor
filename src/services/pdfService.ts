import { jsPDF } from 'jspdf';
import { marked } from 'marked';
import { BookProject } from '../types/book';

class PdfGenerationService {
  public async generatePdf(book: BookProject): Promise<void> {
    if (!book.finalBook) {
      console.error('No book content available to generate PDF.');
      return;
    }

    const doc = new jsPDF({
      orientation: 'p',
      unit: 'pt',
      format: 'a4',
    });

    // --- 1. Define Fonts and Styles ---
    // NOTE: This approach uses HTML/CSS for styling, which is powerful but relies on
    // jspdf's HTML renderer. For 100% pixel-perfect control in the future,
    // you would draw text line-by-line with doc.text(), but that is far more complex.
    const css = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@700&family=Lora:wght@400;700&display=swap');
        body { font-family: 'Lora', serif; line-height: 1.6; color: #212121; }
        h1, h2, h3, h4 { font-family: 'Inter', sans-serif; color: #0D47A1; margin-top: 24px; }
        h1 { font-size: 28px; border-bottom: 2px solid #B0BEC5; padding-bottom: 8px; }
        h2 { font-size: 22px; border-bottom: 1px solid #CFD8DC; padding-bottom: 6px; }
        h3 { font-size: 18px; }
        p { margin-bottom: 12px; }
        pre { background-color: #F1F1F1; padding: 12px; border-radius: 4px; white-space: pre-wrap; word-wrap: break-word; font-family: 'Courier New', monospace; font-size: 10pt; }
        code { background-color: #ECEFF1; padding: 2px 4px; border-radius: 3px; font-family: 'Courier New', monospace; }
        blockquote { border-left: 3px solid #90A4AE; padding-left: 12px; margin-left: 0; color: #546E7A; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 16px; }
        th, td { border: 1px solid #B0BEC5; padding: 8px; text-align: left; }
        th { background-color: #ECEFF1; font-family: 'Inter', sans-serif; }
      </style>
    `;
    
    // --- 2. Parse Markdown to HTML ---
    const rawHtml = await marked.parse(book.finalBook);
    const fullHtml = css + `<body>${rawHtml}</body>`;

    // --- 3. Add Title Page ---
    doc.setFont('Helvetica', 'bold');
    doc.setFontSize(32);
    doc.text(book.title, doc.internal.pageSize.getWidth() / 2, 200, { align: 'center' });

    doc.setFontSize(18);
    doc.setFont('Times', 'normal');
    doc.text(`A Comprehensive Guide to ${book.goal}`, doc.internal.pageSize.getWidth() / 2, 240, { align: 'center' });

    doc.setFontSize(12);
    doc.text(`Generated by AI Tutor's Codex Engine`, doc.internal.pageSize.getWidth() / 2, 350, { align: 'center' });
    doc.text(`Generated on: ${new Date(book.createdAt).toLocaleDateString()}`, doc.internal.pageSize.getWidth() / 2, 370, { align: 'center' });

    doc.addPage();
    
    // --- 4. Generate Main Content ---
    await doc.html(fullHtml, {
      callback: (doc) => {
        // --- 5. Add Page Numbers and Headers ---
        const pageCount = doc.internal.getNumberOfPages();
        doc.setFontSize(10);
        doc.setFont('Helvetica', 'normal');
        for (let i = 1; i <= pageCount; i++) {
          doc.setPage(i);
          const pageText = `Page ${i} of ${pageCount}`;
          const bookTitleText = book.title;
          
          // Add book title to header (except title page)
          if (i > 1) {
             doc.text(bookTitleText, 40, 30, { align: 'left', baseline: 'top' });
          }

          // Add page number to footer
          doc.text(pageText, doc.internal.pageSize.getWidth() - 40, doc.internal.pageSize.getHeight() - 30, { align: 'right' });
        }
        
        // --- 6. Save the PDF ---
        doc.save(`${book.title.replace(/ /g, '_')}_book.pdf`);
      },
      x: 40,
      y: 40,
      width: 515, // A4 width (595) - 2*margin (40)
      windowWidth: 800, // Increase window width for better layout rendering
    });
  }
}

export const pdfService = new PdfGenerationService();
